// <auto-generated />
using System;
using E_CommerceSystemV2.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_CommerceSystemV2.DAL.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    [Migration("20240105115657_AddingSeeeding")]
    partial class AddingSeeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.CampaignCustomers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CampaignCustomers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("449673be-c237-4dfd-8f83-c80768e9ef44"),
                            Email = "marwaghonem29@gmail.com",
                            Name = "Marwa"
                        },
                        new
                        {
                            Id = new Guid("6023ed86-cf89-4c14-9a87-ea26ae24f460"),
                            Email = "Jamal_Ali@outlook.com",
                            Name = "Jamal"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("618b02db-d1cf-4b2b-9fbf-320d08377b42"),
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("ba0ff918-546c-4478-bc90-e74ab59f3cff"),
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = new Guid("bf643b98-64fc-46c1-8c31-552111eb74f5"),
                            Name = "Mobiles"
                        },
                        new
                        {
                            CategoryId = new Guid("45cefe16-9fe9-4028-9464-802cc92219c6"),
                            Name = "Tablets"
                        },
                        new
                        {
                            CategoryId = new Guid("77370d0b-070f-4153-a544-8f57604d6a14"),
                            Name = "Fashion"
                        },
                        new
                        {
                            CategoryId = new Guid("20f70b3d-708a-4ba8-9128-4615a3464fd3"),
                            Name = "Appliances"
                        },
                        new
                        {
                            CategoryId = new Guid("509ab127-35e7-4aea-a7f6-9e0def6ccd96"),
                            Name = "SmartDevices"
                        },
                        new
                        {
                            CategoryId = new Guid("aa86afc3-e0d5-4741-b047-343f1885376a"),
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("f7a110d0-7cc3-4988-be3b-4f3f0f5932ad"),
                            OrderDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7429),
                            UserId = "914f96f1-b243-4b96-a43c-c0043dff9715"
                        },
                        new
                        {
                            OrderId = new Guid("61432ee8-c136-4459-b69c-c4957801355d"),
                            OrderDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7437),
                            UserId = "331564f6-3281-4a64-b903-feb3d97fe146"
                        },
                        new
                        {
                            OrderId = new Guid("60eea5da-f2cd-4fdc-b3f5-794894b1ab21"),
                            OrderDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7442),
                            UserId = "914f96f1-b243-4b96-a43c-c0043dff9715"
                        },
                        new
                        {
                            OrderId = new Guid("1a5635e0-8a4d-4f11-879f-4c06bd69be8d"),
                            OrderDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7444),
                            UserId = "49003d27-37d3-4a86-93ce-5b2221318114"
                        },
                        new
                        {
                            OrderId = new Guid("55a3d7fe-43ef-4ca1-93e5-ecfab416766b"),
                            OrderDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7446),
                            UserId = "914f96f1-b243-4b96-a43c-c0043dff9715"
                        },
                        new
                        {
                            OrderId = new Guid("90a81f1c-1c00-4a0e-8f56-21f3b53cba00"),
                            OrderDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7450),
                            UserId = "cd418a76-6602-473d-bfea-8ca934e30b56"
                        },
                        new
                        {
                            OrderId = new Guid("da6032a1-ff08-45d0-aa1a-47d702bccdb2"),
                            OrderDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7452),
                            UserId = "49003d27-37d3-4a86-93ce-5b2221318114"
                        },
                        new
                        {
                            OrderId = new Guid("d04ab8fd-047f-426b-a775-a5c022ce660b"),
                            OrderDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7454),
                            UserId = "914f96f1-b243-4b96-a43c-c0043dff9715"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TagId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("f2f71960-3867-4b42-bd30-f4b8802f747c"),
                            CategoryType = 2,
                            Name = "Samsung Galaxy S21",
                            OrderId = new Guid("f7a110d0-7cc3-4988-be3b-4f3f0f5932ad"),
                            Price = 799.99m
                        },
                        new
                        {
                            ProductId = new Guid("e4278ee9-549f-4e3a-bb40-5771e6de00aa"),
                            CategoryType = 1,
                            Name = "Sony Smart TV",
                            OrderId = new Guid("61432ee8-c136-4459-b69c-c4957801355d"),
                            Price = 1299.99m
                        },
                        new
                        {
                            ProductId = new Guid("b24c1794-db69-4d84-b448-5ac708f458a4"),
                            CategoryType = 1,
                            Name = "Canon EOS Rebel T7",
                            OrderId = new Guid("60eea5da-f2cd-4fdc-b3f5-794894b1ab21"),
                            Price = 499.99m
                        },
                        new
                        {
                            ProductId = new Guid("ff60d97f-a5fe-4585-a207-0b499a22a82c"),
                            CategoryType = 3,
                            Name = "Nike Running Shoes",
                            OrderId = new Guid("61432ee8-c136-4459-b69c-c4957801355d"),
                            Price = 89.99m
                        },
                        new
                        {
                            ProductId = new Guid("e57b0fdf-ab7b-498b-964a-9e983526540b"),
                            CategoryType = 4,
                            Name = "KitchenAid Stand Mixer",
                            OrderId = new Guid("1a5635e0-8a4d-4f11-879f-4c06bd69be8d"),
                            Price = 349.99m
                        },
                        new
                        {
                            ProductId = new Guid("33427392-3d61-428b-bb74-b27358dae2f6"),
                            CategoryType = 1,
                            Name = "HP Printer",
                            OrderId = new Guid("61432ee8-c136-4459-b69c-c4957801355d"),
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("d1027440-6b13-4fd2-bfba-340214f09c37"),
                            CategoryType = 3,
                            Name = "Levi's Jeans",
                            OrderId = new Guid("61432ee8-c136-4459-b69c-c4957801355d"),
                            Price = 59.99m
                        },
                        new
                        {
                            ProductId = new Guid("871b5405-6dc5-47a6-b02e-f80c6ebee9e2"),
                            CategoryType = 1,
                            Name = "Bose Noise-Canceling Headphones",
                            OrderId = new Guid("61432ee8-c136-4459-b69c-c4957801355d"),
                            Price = 299.99m
                        },
                        new
                        {
                            ProductId = new Guid("df32db8b-15c3-44af-aff1-a2440dc7f523"),
                            CategoryType = 6,
                            Name = "Fitbit Charge 5",
                            OrderId = new Guid("61432ee8-c136-4459-b69c-c4957801355d"),
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("ca4d1ded-7d4d-41f6-9ee0-41715085f598"),
                            CategoryType = 4,
                            Name = "Cuisinart Coffee Maker",
                            OrderId = new Guid("f7a110d0-7cc3-4988-be3b-4f3f0f5932ad"),
                            Price = 79.99m
                        },
                        new
                        {
                            ProductId = new Guid("f42865db-b358-4151-a681-f95b7e2a541a"),
                            CategoryType = 3,
                            Name = "Adidas Running Shoes",
                            OrderId = new Guid("60eea5da-f2cd-4fdc-b3f5-794894b1ab21"),
                            Price = 109.99m
                        },
                        new
                        {
                            ProductId = new Guid("8d227ecc-04a6-4817-a5a4-6201cf76dd40"),
                            CategoryType = 5,
                            Name = "Amazon Echo Dot",
                            OrderId = new Guid("61432ee8-c136-4459-b69c-c4957801355d"),
                            Price = 39.99m
                        },
                        new
                        {
                            ProductId = new Guid("75ecfe62-c1fc-4466-83e7-451999543342"),
                            CategoryType = 6,
                            Name = "Razer Gaming Mouse",
                            OrderId = new Guid("61432ee8-c136-4459-b69c-c4957801355d"),
                            Price = 69.99m
                        },
                        new
                        {
                            ProductId = new Guid("333ed7b8-90c6-4522-9fde-43f57b5b89e1"),
                            CategoryType = 3,
                            Name = "Calvin Klein Watch",
                            OrderId = new Guid("61432ee8-c136-4459-b69c-c4957801355d"),
                            Price = 199.99m
                        },
                        new
                        {
                            ProductId = new Guid("97f2567f-0d57-4a10-aab9-43f66393afd1"),
                            CategoryType = 3,
                            Name = "Fossil Smartwatch",
                            OrderId = new Guid("f7a110d0-7cc3-4988-be3b-4f3f0f5932ad"),
                            Price = 149.99m
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("e126b7b4-d6fe-4b6e-9b0f-d865b3871827"),
                            Name = "Fashion 2024"
                        },
                        new
                        {
                            TagId = new Guid("7236c9dc-d594-4f04-a7ea-442b9c7ce9f6"),
                            Name = "FlagShip Mobiles"
                        },
                        new
                        {
                            TagId = new Guid("6d89fe93-505b-4032-a51d-32278ff391bd"),
                            Name = "Tech"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("e4278ee9-549f-4e3a-bb40-5771e6de00aa"),
                            TagId = new Guid("7236c9dc-d594-4f04-a7ea-442b9c7ce9f6")
                        },
                        new
                        {
                            ProductId = new Guid("b24c1794-db69-4d84-b448-5ac708f458a4"),
                            TagId = new Guid("6d89fe93-505b-4032-a51d-32278ff391bd")
                        },
                        new
                        {
                            ProductId = new Guid("ff60d97f-a5fe-4585-a207-0b499a22a82c"),
                            TagId = new Guid("6d89fe93-505b-4032-a51d-32278ff391bd")
                        },
                        new
                        {
                            ProductId = new Guid("e57b0fdf-ab7b-498b-964a-9e983526540b"),
                            TagId = new Guid("6d89fe93-505b-4032-a51d-32278ff391bd")
                        },
                        new
                        {
                            ProductId = new Guid("33427392-3d61-428b-bb74-b27358dae2f6"),
                            TagId = new Guid("6d89fe93-505b-4032-a51d-32278ff391bd")
                        },
                        new
                        {
                            ProductId = new Guid("d1027440-6b13-4fd2-bfba-340214f09c37"),
                            TagId = new Guid("6d89fe93-505b-4032-a51d-32278ff391bd")
                        },
                        new
                        {
                            ProductId = new Guid("871b5405-6dc5-47a6-b02e-f80c6ebee9e2"),
                            TagId = new Guid("6d89fe93-505b-4032-a51d-32278ff391bd")
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Text", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Textsss");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a8fa707-cd35-4050-9763-7abb813bf3c6"),
                            ArabicText = "مرحبا",
                            EnglishText = "Welcome",
                            TextKey = "WelcomeMessage"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "331564f6-3281-4a64-b903-feb3d97fe146",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "690e1610-c9fb-4db0-b2fc-f674c88194cb",
                            CreationDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7389),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ad7844c-481e-4f2e-9b65-4a279f01ce97",
                            TwoFactorEnabled = false,
                            UserName = "john doe"
                        },
                        new
                        {
                            Id = "914f96f1-b243-4b96-a43c-c0043dff9715",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e6e2b92-5498-40ea-9425-7319de224489",
                            CreationDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7397),
                            Email = "jane.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7c4311e-e338-40a8-86e0-266b064b14a1",
                            TwoFactorEnabled = false,
                            UserName = "jane doe"
                        },
                        new
                        {
                            Id = "49003d27-37d3-4a86-93ce-5b2221318114",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9bf1c11-9dcc-4476-bcac-a51f326c7e60",
                            CreationDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7417),
                            Email = "Sara.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bde03dc-0640-4d5e-81f4-18c843a94620",
                            TwoFactorEnabled = false,
                            UserName = "Sara doe"
                        },
                        new
                        {
                            Id = "cd418a76-6602-473d-bfea-8ca934e30b56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0312a912-34ca-4987-915c-fc94b30f07a4",
                            CreationDate = new DateTime(2024, 1, 5, 14, 56, 56, 606, DateTimeKind.Local).AddTicks(7422),
                            Email = "Sandy.Jakson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "722e3c5c-f4f2-4213-ac37-a4b7c4c48ce7",
                            TwoFactorEnabled = false,
                            UserName = "Sandy Jakson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", null)
                        .WithMany("Products")
                        .HasForeignKey("TagId");

                    b.Navigation("Category");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
