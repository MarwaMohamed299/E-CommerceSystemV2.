// <auto-generated />
using System;
using E_CommerceSystemV2.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_CommerceSystemV2.DAL.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    [Migration("20231217153247_AddingManyToMany")]
    partial class AddingManyToMany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("2024abf4-128a-4428-be61-07527eb457f4"),
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("391608a7-aca5-408b-ba6f-edcb7f68b2c3"),
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = new Guid("5a605348-b861-4beb-ad64-51a57c5383a5"),
                            Name = "Mobiles"
                        },
                        new
                        {
                            CategoryId = new Guid("3c074ff0-d2be-474d-94b0-968ac0a5883f"),
                            Name = "Tablets"
                        },
                        new
                        {
                            CategoryId = new Guid("017e2185-48c6-4c95-a48d-16e470603710"),
                            Name = "Fashion"
                        },
                        new
                        {
                            CategoryId = new Guid("c19e82b5-7bf9-4840-8e89-f2f772dc50b3"),
                            Name = "Appliances"
                        },
                        new
                        {
                            CategoryId = new Guid("fd1d5176-a150-47a0-b302-bcf144f31b4d"),
                            Name = "SmartDevices"
                        },
                        new
                        {
                            CategoryId = new Guid("f6f4e350-25f9-4a83-8027-97f56f36e3c3"),
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("119131d2-f0f7-4d8f-9bb5-e8e646df4f57"),
                            OrderDate = new DateTime(2023, 12, 17, 17, 32, 46, 880, DateTimeKind.Local).AddTicks(2001)
                        },
                        new
                        {
                            OrderId = new Guid("53da2caf-e663-4700-b2a8-7d37ab16fab5"),
                            OrderDate = new DateTime(2023, 12, 17, 17, 32, 46, 880, DateTimeKind.Local).AddTicks(2007)
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TagId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("c6db1b96-ea2d-43ac-b99e-c8a007d26f98"),
                            CategoryType = 2,
                            Name = "Samsung Galaxy S21",
                            Price = 799.99m
                        },
                        new
                        {
                            ProductId = new Guid("cb6c9e3f-9c60-48fe-96c8-f99090fd891c"),
                            CategoryType = 1,
                            Name = "Sony Smart TV",
                            Price = 1299.99m
                        },
                        new
                        {
                            ProductId = new Guid("ca5240cc-1597-4d70-be9f-bb36a6917dfa"),
                            CategoryType = 1,
                            Name = "Canon EOS Rebel T7",
                            Price = 499.99m
                        },
                        new
                        {
                            ProductId = new Guid("7bcce6d2-f1ee-4664-8d5e-577cde13fe11"),
                            CategoryType = 3,
                            Name = "Nike Running Shoes",
                            Price = 89.99m
                        },
                        new
                        {
                            ProductId = new Guid("0388871d-1ed4-40d9-9141-fbc7ec3ec36e"),
                            CategoryType = 4,
                            Name = "KitchenAid Stand Mixer",
                            Price = 349.99m
                        },
                        new
                        {
                            ProductId = new Guid("6272d26a-bd72-4eb9-ab68-b68c86a27230"),
                            CategoryType = 1,
                            Name = "HP Printer",
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("7036dc85-833f-4be8-9b38-57c4b8915195"),
                            CategoryType = 3,
                            Name = "Levi's Jeans",
                            Price = 59.99m
                        },
                        new
                        {
                            ProductId = new Guid("a5065ae5-ae59-4bab-b715-77d56ee04074"),
                            CategoryType = 1,
                            Name = "Bose Noise-Canceling Headphones",
                            Price = 299.99m
                        },
                        new
                        {
                            ProductId = new Guid("5542e0b4-1732-47d0-823a-7fd2b5943f3e"),
                            CategoryType = 6,
                            Name = "Fitbit Charge 5",
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("fc9e8ed9-eac5-44b7-b419-20705022cf65"),
                            CategoryType = 4,
                            Name = "Cuisinart Coffee Maker",
                            Price = 79.99m
                        },
                        new
                        {
                            ProductId = new Guid("bad5db85-5450-42c9-a103-357dd33b6ed8"),
                            CategoryType = 3,
                            Name = "Adidas Running Shoes",
                            Price = 109.99m
                        },
                        new
                        {
                            ProductId = new Guid("8dc54614-a6bb-43da-8208-b7ff05f7672f"),
                            CategoryType = 5,
                            Name = "Amazon Echo Dot",
                            Price = 39.99m
                        },
                        new
                        {
                            ProductId = new Guid("9364327a-844f-4afe-bef6-ed19f28efd37"),
                            CategoryType = 6,
                            Name = "Razer Gaming Mouse",
                            Price = 69.99m
                        },
                        new
                        {
                            ProductId = new Guid("fca2697f-d210-4277-844c-f2521c5b38f8"),
                            CategoryType = 3,
                            Name = "Calvin Klein Watch",
                            Price = 199.99m
                        },
                        new
                        {
                            ProductId = new Guid("38bc03d4-a17d-4304-965d-46bf93a3ad1e"),
                            CategoryType = 3,
                            Name = "Fossil Smartwatch",
                            Price = 149.99m
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("cfd931d2-3881-48c0-8924-8c981c7b4e53"),
                            Name = "Fashion 2024"
                        },
                        new
                        {
                            TagId = new Guid("656dcee4-d717-4c32-aa6f-95da420f1777"),
                            Name = "FlagShip Mobiles"
                        },
                        new
                        {
                            TagId = new Guid("e19e7131-285f-4a94-b01e-7421f0c22b59"),
                            Name = "Tech"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("cb6c9e3f-9c60-48fe-96c8-f99090fd891c"),
                            TagId = new Guid("656dcee4-d717-4c32-aa6f-95da420f1777")
                        },
                        new
                        {
                            ProductId = new Guid("ca5240cc-1597-4d70-be9f-bb36a6917dfa"),
                            TagId = new Guid("e19e7131-285f-4a94-b01e-7421f0c22b59")
                        },
                        new
                        {
                            ProductId = new Guid("7bcce6d2-f1ee-4664-8d5e-577cde13fe11"),
                            TagId = new Guid("e19e7131-285f-4a94-b01e-7421f0c22b59")
                        },
                        new
                        {
                            ProductId = new Guid("0388871d-1ed4-40d9-9141-fbc7ec3ec36e"),
                            TagId = new Guid("e19e7131-285f-4a94-b01e-7421f0c22b59")
                        },
                        new
                        {
                            ProductId = new Guid("6272d26a-bd72-4eb9-ab68-b68c86a27230"),
                            TagId = new Guid("e19e7131-285f-4a94-b01e-7421f0c22b59")
                        },
                        new
                        {
                            ProductId = new Guid("7036dc85-833f-4be8-9b38-57c4b8915195"),
                            TagId = new Guid("e19e7131-285f-4a94-b01e-7421f0c22b59")
                        },
                        new
                        {
                            ProductId = new Guid("a5065ae5-ae59-4bab-b715-77d56ee04074"),
                            TagId = new Guid("e19e7131-285f-4a94-b01e-7421f0c22b59")
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "eae7b3a5-5441-4abb-94f0-ce35f3c8963b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd91a48b-2013-49c7-a0d7-9b04a1d89aa9",
                            CreationDate = new DateTime(2023, 12, 17, 17, 32, 46, 880, DateTimeKind.Local).AddTicks(1948),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d88ca2f-9dc0-4dc4-88f1-5458ccf1edc8",
                            TwoFactorEnabled = false,
                            UserName = "john doe"
                        },
                        new
                        {
                            Id = "7e87a4d6-4f3d-44e4-999c-56d6ab0192d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32e10c83-5326-40dc-adb7-45f1766880b0",
                            CreationDate = new DateTime(2023, 12, 17, 17, 32, 46, 880, DateTimeKind.Local).AddTicks(1966),
                            Email = "jane.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6de0626c-1b0e-452f-b6a7-ae2df4879921",
                            TwoFactorEnabled = false,
                            UserName = "jane doe"
                        },
                        new
                        {
                            Id = "ce4dc91c-e83a-4ec3-91f4-083118866779",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11c11d49-0eb6-4b7c-91fa-c4f5e01a58cd",
                            CreationDate = new DateTime(2023, 12, 17, 17, 32, 46, 880, DateTimeKind.Local).AddTicks(1981),
                            Email = "Sara.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9101b99f-e4d8-435f-808e-6f5cf091fdee",
                            TwoFactorEnabled = false,
                            UserName = "Sara doe"
                        },
                        new
                        {
                            Id = "6eeed75d-7e23-43f1-a27e-1f97b6eac236",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b54874a-d9be-46d5-a617-67e2e01b76d4",
                            CreationDate = new DateTime(2023, 12, 17, 17, 32, 46, 880, DateTimeKind.Local).AddTicks(1994),
                            Email = "Sandy.Jakson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7ba2f3e-8d48-4e12-89fa-efd9d3db1950",
                            TwoFactorEnabled = false,
                            UserName = "Sandy Jakson"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.UserOrders", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("UserOrders");

                    b.HasData(
                        new
                        {
                            Id = "7e87a4d6-4f3d-44e4-999c-56d6ab0192d8",
                            OrderId = new Guid("53da2caf-e663-4700-b2a8-7d37ab16fab5")
                        },
                        new
                        {
                            Id = "ce4dc91c-e83a-4ec3-91f4-083118866779",
                            OrderId = new Guid("53da2caf-e663-4700-b2a8-7d37ab16fab5")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", null)
                        .WithMany("Products")
                        .HasForeignKey("TagId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.UserOrders", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", "User")
                        .WithMany("UserOrders")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Order", "Order")
                        .WithMany("UserOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("UserOrders");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Navigation("UserOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
