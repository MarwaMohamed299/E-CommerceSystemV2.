// <auto-generated />
using System;
using E_CommerceSystemV2.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_CommerceSystemV2.DAL.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    partial class ECommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("02a9c761-f62e-4b1f-994d-a42c60baecfd"),
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("29bf952d-fe1b-46d6-9dcf-792888134c68"),
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = new Guid("7aa31bd4-2a97-4d7d-b320-ceb6053ab188"),
                            Name = "Mobiles"
                        },
                        new
                        {
                            CategoryId = new Guid("52c113bf-6f35-4c9e-9ccb-08b536ceea9c"),
                            Name = "Tablets"
                        },
                        new
                        {
                            CategoryId = new Guid("254b221e-4a9d-43c5-9a67-004b671624af"),
                            Name = "Fashion"
                        },
                        new
                        {
                            CategoryId = new Guid("fb4bf68b-1340-49b7-b3d0-d36a57816260"),
                            Name = "Appliances"
                        },
                        new
                        {
                            CategoryId = new Guid("73fa5b4e-6c71-4f9e-8522-1848336fea07"),
                            Name = "SmartDevices"
                        },
                        new
                        {
                            CategoryId = new Guid("0b7375db-6acb-46ae-aea2-f99772dc373e"),
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("982a7a74-fbf8-4470-b71a-248c567b0c62"),
                            OrderDate = new DateTime(2023, 12, 16, 16, 10, 11, 851, DateTimeKind.Local).AddTicks(9537)
                        },
                        new
                        {
                            OrderId = new Guid("ff5af8eb-9367-4c5a-b476-1169dc0d9960"),
                            OrderDate = new DateTime(2023, 12, 16, 16, 10, 11, 851, DateTimeKind.Local).AddTicks(9540)
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("0ae0d660-a4d4-4e86-a935-a1e53a7a5fab"),
                            CategoryType = 2,
                            Name = "Samsung Galaxy S21",
                            Price = 799.99m
                        },
                        new
                        {
                            ProductId = new Guid("98f322c6-ae4b-4abb-8a61-f9af769eda2c"),
                            CategoryType = 1,
                            Name = "Sony Smart TV",
                            Price = 1299.99m
                        },
                        new
                        {
                            ProductId = new Guid("0a809444-8345-488d-a027-66c40bcc9583"),
                            CategoryType = 1,
                            Name = "Canon EOS Rebel T7",
                            Price = 499.99m
                        },
                        new
                        {
                            ProductId = new Guid("a38e151a-4bd3-4e6b-8e3e-e7d58b9dc89d"),
                            CategoryType = 3,
                            Name = "Nike Running Shoes",
                            Price = 89.99m
                        },
                        new
                        {
                            ProductId = new Guid("0d880792-bde9-4d53-ba9e-1d72dabf637b"),
                            CategoryType = 4,
                            Name = "KitchenAid Stand Mixer",
                            Price = 349.99m
                        },
                        new
                        {
                            ProductId = new Guid("4c261103-8d7f-45b4-918d-60e2579768fb"),
                            CategoryType = 1,
                            Name = "HP Printer",
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("87d3b371-c4e0-4f6d-ac80-988949de071a"),
                            CategoryType = 3,
                            Name = "Levi's Jeans",
                            Price = 59.99m
                        },
                        new
                        {
                            ProductId = new Guid("0adc9a32-4a4a-4353-9b60-b7ff7236e1c0"),
                            CategoryType = 1,
                            Name = "Bose Noise-Canceling Headphones",
                            Price = 299.99m
                        },
                        new
                        {
                            ProductId = new Guid("ecb89810-d67d-47c8-abaa-5e7a53b53743"),
                            CategoryType = 6,
                            Name = "Fitbit Charge 5",
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("52addef3-1313-46bd-8f07-8ba8683c7a46"),
                            CategoryType = 4,
                            Name = "Cuisinart Coffee Maker",
                            Price = 79.99m
                        },
                        new
                        {
                            ProductId = new Guid("c34fc8f8-bf0e-499f-872f-090c786c45a8"),
                            CategoryType = 3,
                            Name = "Adidas Running Shoes",
                            Price = 109.99m
                        },
                        new
                        {
                            ProductId = new Guid("bd32118c-51c4-4e3f-acef-bfad7bd04377"),
                            CategoryType = 5,
                            Name = "Amazon Echo Dot",
                            Price = 39.99m
                        },
                        new
                        {
                            ProductId = new Guid("534fe139-2600-46d4-98a4-ab2e172260e7"),
                            CategoryType = 6,
                            Name = "Razer Gaming Mouse",
                            Price = 69.99m
                        },
                        new
                        {
                            ProductId = new Guid("d26cc5bf-74a7-4b9b-a7cb-d59b0254a696"),
                            CategoryType = 3,
                            Name = "Calvin Klein Watch",
                            Price = 199.99m
                        },
                        new
                        {
                            ProductId = new Guid("e3a3b0e0-3bae-44c9-82dc-7b04d64de48f"),
                            CategoryType = 3,
                            Name = "Fossil Smartwatch",
                            Price = 149.99m
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("5116354d-96a1-429a-a373-98ae6847cb9e"),
                            Name = "Fashion 2024"
                        },
                        new
                        {
                            TagId = new Guid("737cf16e-5cb2-4a8a-9059-97777fb006ad"),
                            Name = "FlagShip Mobiles"
                        },
                        new
                        {
                            TagId = new Guid("de9cc795-4ee7-45d4-b523-ea5c743fd8d0"),
                            Name = "Tech"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("98f322c6-ae4b-4abb-8a61-f9af769eda2c"),
                            TagId = new Guid("737cf16e-5cb2-4a8a-9059-97777fb006ad")
                        },
                        new
                        {
                            ProductId = new Guid("0a809444-8345-488d-a027-66c40bcc9583"),
                            TagId = new Guid("de9cc795-4ee7-45d4-b523-ea5c743fd8d0")
                        },
                        new
                        {
                            ProductId = new Guid("a38e151a-4bd3-4e6b-8e3e-e7d58b9dc89d"),
                            TagId = new Guid("de9cc795-4ee7-45d4-b523-ea5c743fd8d0")
                        },
                        new
                        {
                            ProductId = new Guid("0d880792-bde9-4d53-ba9e-1d72dabf637b"),
                            TagId = new Guid("de9cc795-4ee7-45d4-b523-ea5c743fd8d0")
                        },
                        new
                        {
                            ProductId = new Guid("4c261103-8d7f-45b4-918d-60e2579768fb"),
                            TagId = new Guid("de9cc795-4ee7-45d4-b523-ea5c743fd8d0")
                        },
                        new
                        {
                            ProductId = new Guid("87d3b371-c4e0-4f6d-ac80-988949de071a"),
                            TagId = new Guid("de9cc795-4ee7-45d4-b523-ea5c743fd8d0")
                        },
                        new
                        {
                            ProductId = new Guid("0adc9a32-4a4a-4353-9b60-b7ff7236e1c0"),
                            TagId = new Guid("de9cc795-4ee7-45d4-b523-ea5c743fd8d0")
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f2b17123-530d-403a-87c1-03ba87e014dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2de514f0-7333-4fb1-a23b-fadbe46c03bd",
                            CreationDate = new DateTime(2023, 12, 16, 16, 10, 11, 851, DateTimeKind.Local).AddTicks(9501),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af0c079b-1553-478d-9798-038c093d5e51",
                            TwoFactorEnabled = false,
                            UserName = "john doe"
                        },
                        new
                        {
                            Id = "ec9190fc-b6d7-4eb1-8e6c-e22fb71aab3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f498ae7b-a44b-4dae-9f58-7dd2052fd11e",
                            CreationDate = new DateTime(2023, 12, 16, 16, 10, 11, 851, DateTimeKind.Local).AddTicks(9510),
                            Email = "jane.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75847b32-fc0b-4290-ae7f-0ddb7a2baf52",
                            TwoFactorEnabled = false,
                            UserName = "jane doe"
                        },
                        new
                        {
                            Id = "6daf8104-a4e3-4c46-b3cb-0918617b1c61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3b29ec6-5656-4043-b313-7602999de03b",
                            CreationDate = new DateTime(2023, 12, 16, 16, 10, 11, 851, DateTimeKind.Local).AddTicks(9517),
                            Email = "Sara.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cb407e9-817b-4732-8947-a231c79f053d",
                            TwoFactorEnabled = false,
                            UserName = "Sara doe"
                        },
                        new
                        {
                            Id = "addbff2d-c448-4a1d-9c05-0a909a4bdf4a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9bb11b0-2b11-4704-80e0-6502cfba7147",
                            CreationDate = new DateTime(2023, 12, 16, 16, 10, 11, 851, DateTimeKind.Local).AddTicks(9527),
                            Email = "Sandy.Jakson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5afc1f1f-a4e8-4350-9ac3-f8ec8ef8aca2",
                            TwoFactorEnabled = false,
                            UserName = "Sandy Jakson"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.UserOrders", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("UserOrders");

                    b.HasData(
                        new
                        {
                            Id = "ec9190fc-b6d7-4eb1-8e6c-e22fb71aab3c",
                            OrderId = new Guid("ff5af8eb-9367-4c5a-b476-1169dc0d9960")
                        },
                        new
                        {
                            Id = "6daf8104-a4e3-4c46-b3cb-0918617b1c61",
                            OrderId = new Guid("ff5af8eb-9367-4c5a-b476-1169dc0d9960")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.UserOrders", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", "User")
                        .WithMany("UserOrders")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Order", "Order")
                        .WithMany("UserOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("UserOrders");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Navigation("UserOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
