// <auto-generated />
using System;
using E_CommerceSystemV2.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_CommerceSystemV2.DAL.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    partial class ECommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("e20fcb32-e66b-4f39-bcc4-17093bd305b9"),
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("a3e7cffc-f47a-46cb-9233-927aa8e42e07"),
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = new Guid("5a59f5a4-d059-4155-8b72-d8e9db8d6237"),
                            Name = "Mobiles"
                        },
                        new
                        {
                            CategoryId = new Guid("9b7b88c5-162c-4712-b414-c0f1002bbe82"),
                            Name = "Tablets"
                        },
                        new
                        {
                            CategoryId = new Guid("0397150e-05b3-4fc2-8e6b-9a53b1da359f"),
                            Name = "Fashion"
                        },
                        new
                        {
                            CategoryId = new Guid("e8776dd9-f129-4696-9e2e-1f44d71b0293"),
                            Name = "Appliances"
                        },
                        new
                        {
                            CategoryId = new Guid("40b5538a-5108-43ab-98d8-154909d27980"),
                            Name = "SmartDevices"
                        },
                        new
                        {
                            CategoryId = new Guid("f404369a-5578-4593-93aa-8817a630f639"),
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("20dd7cb7-5440-41fd-bf00-65e47a056d0c"),
                            OrderDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1039),
                            UserId = "f86a79f0-0680-41f5-a2d8-8bf2d1c04081"
                        },
                        new
                        {
                            OrderId = new Guid("5a3081d7-7565-4335-a199-c5fc4ccc8096"),
                            OrderDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1045),
                            UserId = "7517cc9e-ced0-48ce-b404-ace27e6e2c9d"
                        },
                        new
                        {
                            OrderId = new Guid("8d6ed240-c801-4b55-a881-58827c28fb06"),
                            OrderDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1048),
                            UserId = "f86a79f0-0680-41f5-a2d8-8bf2d1c04081"
                        },
                        new
                        {
                            OrderId = new Guid("e5dd0a36-65f0-49fb-9f16-75c279dbc6c3"),
                            OrderDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1052),
                            UserId = "5e542efa-8217-4855-93d7-7c47a56c98f7"
                        },
                        new
                        {
                            OrderId = new Guid("e6a023f6-99c0-4a34-9ecb-0b49d367dc50"),
                            OrderDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1058),
                            UserId = "f86a79f0-0680-41f5-a2d8-8bf2d1c04081"
                        },
                        new
                        {
                            OrderId = new Guid("5d0bfb29-1d96-448c-942a-cbb084cf32a5"),
                            OrderDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1067),
                            UserId = "c6a48572-1d1c-47bc-8082-97369cb152fe"
                        },
                        new
                        {
                            OrderId = new Guid("46307b76-03aa-4329-9216-1ad02d7f3ce5"),
                            OrderDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1070),
                            UserId = "5e542efa-8217-4855-93d7-7c47a56c98f7"
                        },
                        new
                        {
                            OrderId = new Guid("9f1db7cb-46dc-4b3b-80f1-113ab1c10a2f"),
                            OrderDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1073),
                            UserId = "f86a79f0-0680-41f5-a2d8-8bf2d1c04081"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TagId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("3d12a097-ae94-4bd1-8aa6-9bc40128a7f8"),
                            CategoryType = 2,
                            Name = "Samsung Galaxy S21",
                            OrderId = new Guid("20dd7cb7-5440-41fd-bf00-65e47a056d0c"),
                            Price = 799.99m
                        },
                        new
                        {
                            ProductId = new Guid("ae170701-a04d-476e-8bd9-3f9bb12bf79f"),
                            CategoryType = 1,
                            Name = "Sony Smart TV",
                            OrderId = new Guid("5a3081d7-7565-4335-a199-c5fc4ccc8096"),
                            Price = 1299.99m
                        },
                        new
                        {
                            ProductId = new Guid("c79c163e-ca39-42d6-980e-981e97d2fe5f"),
                            CategoryType = 1,
                            Name = "Canon EOS Rebel T7",
                            OrderId = new Guid("8d6ed240-c801-4b55-a881-58827c28fb06"),
                            Price = 499.99m
                        },
                        new
                        {
                            ProductId = new Guid("b243621f-e966-476e-acfb-6dabb89cd8a7"),
                            CategoryType = 3,
                            Name = "Nike Running Shoes",
                            OrderId = new Guid("5a3081d7-7565-4335-a199-c5fc4ccc8096"),
                            Price = 89.99m
                        },
                        new
                        {
                            ProductId = new Guid("3bef8d04-44fe-4b64-9919-400029667621"),
                            CategoryType = 4,
                            Name = "KitchenAid Stand Mixer",
                            OrderId = new Guid("e5dd0a36-65f0-49fb-9f16-75c279dbc6c3"),
                            Price = 349.99m
                        },
                        new
                        {
                            ProductId = new Guid("399acc92-7aaa-4f05-aae2-d07e88e83ebb"),
                            CategoryType = 1,
                            Name = "HP Printer",
                            OrderId = new Guid("5a3081d7-7565-4335-a199-c5fc4ccc8096"),
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("064fd01a-bf9f-4889-9200-60b295613c54"),
                            CategoryType = 3,
                            Name = "Levi's Jeans",
                            OrderId = new Guid("5a3081d7-7565-4335-a199-c5fc4ccc8096"),
                            Price = 59.99m
                        },
                        new
                        {
                            ProductId = new Guid("3935c87e-2954-44cc-a95f-7f67a902291b"),
                            CategoryType = 1,
                            Name = "Bose Noise-Canceling Headphones",
                            OrderId = new Guid("5a3081d7-7565-4335-a199-c5fc4ccc8096"),
                            Price = 299.99m
                        },
                        new
                        {
                            ProductId = new Guid("d82730ad-c898-48fb-bc7a-7d0ab50cd6a4"),
                            CategoryType = 6,
                            Name = "Fitbit Charge 5",
                            OrderId = new Guid("5a3081d7-7565-4335-a199-c5fc4ccc8096"),
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("f2332187-7456-4e9c-a3fa-db3621091cf6"),
                            CategoryType = 4,
                            Name = "Cuisinart Coffee Maker",
                            OrderId = new Guid("20dd7cb7-5440-41fd-bf00-65e47a056d0c"),
                            Price = 79.99m
                        },
                        new
                        {
                            ProductId = new Guid("04ef4f41-6446-4dd9-9173-1fd64e651444"),
                            CategoryType = 3,
                            Name = "Adidas Running Shoes",
                            OrderId = new Guid("8d6ed240-c801-4b55-a881-58827c28fb06"),
                            Price = 109.99m
                        },
                        new
                        {
                            ProductId = new Guid("55b572f5-374d-4ecc-81a4-b242ba6a5ea1"),
                            CategoryType = 5,
                            Name = "Amazon Echo Dot",
                            OrderId = new Guid("5a3081d7-7565-4335-a199-c5fc4ccc8096"),
                            Price = 39.99m
                        },
                        new
                        {
                            ProductId = new Guid("c75be557-8fd5-4e3b-9725-61b3a97142bd"),
                            CategoryType = 6,
                            Name = "Razer Gaming Mouse",
                            OrderId = new Guid("5a3081d7-7565-4335-a199-c5fc4ccc8096"),
                            Price = 69.99m
                        },
                        new
                        {
                            ProductId = new Guid("dda0b29c-14c9-40c2-872d-e0f7fec49d7a"),
                            CategoryType = 3,
                            Name = "Calvin Klein Watch",
                            OrderId = new Guid("5a3081d7-7565-4335-a199-c5fc4ccc8096"),
                            Price = 199.99m
                        },
                        new
                        {
                            ProductId = new Guid("103fc9a8-64ee-4e1a-ae9e-ac26a3974109"),
                            CategoryType = 3,
                            Name = "Fossil Smartwatch",
                            OrderId = new Guid("20dd7cb7-5440-41fd-bf00-65e47a056d0c"),
                            Price = 149.99m
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("ce580732-35a9-41b8-96af-116518cef9f1"),
                            Name = "Fashion 2024"
                        },
                        new
                        {
                            TagId = new Guid("6613d20b-76c4-4d60-9f2c-b4f4d33a11c7"),
                            Name = "FlagShip Mobiles"
                        },
                        new
                        {
                            TagId = new Guid("f1c0a02b-b9e0-4155-b618-1e316f486fd6"),
                            Name = "Tech"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("ae170701-a04d-476e-8bd9-3f9bb12bf79f"),
                            TagId = new Guid("6613d20b-76c4-4d60-9f2c-b4f4d33a11c7")
                        },
                        new
                        {
                            ProductId = new Guid("c79c163e-ca39-42d6-980e-981e97d2fe5f"),
                            TagId = new Guid("f1c0a02b-b9e0-4155-b618-1e316f486fd6")
                        },
                        new
                        {
                            ProductId = new Guid("b243621f-e966-476e-acfb-6dabb89cd8a7"),
                            TagId = new Guid("f1c0a02b-b9e0-4155-b618-1e316f486fd6")
                        },
                        new
                        {
                            ProductId = new Guid("3bef8d04-44fe-4b64-9919-400029667621"),
                            TagId = new Guid("f1c0a02b-b9e0-4155-b618-1e316f486fd6")
                        },
                        new
                        {
                            ProductId = new Guid("399acc92-7aaa-4f05-aae2-d07e88e83ebb"),
                            TagId = new Guid("f1c0a02b-b9e0-4155-b618-1e316f486fd6")
                        },
                        new
                        {
                            ProductId = new Guid("064fd01a-bf9f-4889-9200-60b295613c54"),
                            TagId = new Guid("f1c0a02b-b9e0-4155-b618-1e316f486fd6")
                        },
                        new
                        {
                            ProductId = new Guid("3935c87e-2954-44cc-a95f-7f67a902291b"),
                            TagId = new Guid("f1c0a02b-b9e0-4155-b618-1e316f486fd6")
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7517cc9e-ced0-48ce-b404-ace27e6e2c9d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fb8f04c-1532-4a06-9f6c-70947b15b274",
                            CreationDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(995),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8afa9aee-b694-4f5f-ba9b-9b60919c5d0e",
                            TwoFactorEnabled = false,
                            UserName = "john doe"
                        },
                        new
                        {
                            Id = "f86a79f0-0680-41f5-a2d8-8bf2d1c04081",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a232040e-2f38-4bcd-8a72-15df79e8ff93",
                            CreationDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1010),
                            Email = "jane.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "892a66a2-be15-4cea-a391-95464787d676",
                            TwoFactorEnabled = false,
                            UserName = "jane doe"
                        },
                        new
                        {
                            Id = "5e542efa-8217-4855-93d7-7c47a56c98f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2eec0103-b47a-4d67-a071-16f0f3e6ac86",
                            CreationDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1021),
                            Email = "Sara.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76d3d2e8-4f48-4ee9-a49d-4bfff2003a69",
                            TwoFactorEnabled = false,
                            UserName = "Sara doe"
                        },
                        new
                        {
                            Id = "c6a48572-1d1c-47bc-8082-97369cb152fe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04ed1d37-8e38-4b3a-bab7-da9c0d6b1458",
                            CreationDate = new DateTime(2023, 12, 19, 20, 27, 55, 374, DateTimeKind.Local).AddTicks(1029),
                            Email = "Sandy.Jakson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f27fa9b-67c4-41e5-9b96-9c4cba002de7",
                            TwoFactorEnabled = false,
                            UserName = "Sandy Jakson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", null)
                        .WithMany("Products")
                        .HasForeignKey("TagId");

                    b.Navigation("Category");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
