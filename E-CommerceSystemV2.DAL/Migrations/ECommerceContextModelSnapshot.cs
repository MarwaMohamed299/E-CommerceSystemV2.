// <auto-generated />
using System;
using E_CommerceSystemV2.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_CommerceSystemV2.DAL.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    partial class ECommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.CampaignCustomers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CampaignCustomers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50dacaaf-093f-4260-aa72-712086df41b0"),
                            Email = "marwaghonem29@gmail.com",
                            Name = "Marwa"
                        },
                        new
                        {
                            Id = new Guid("b4f65567-55cb-4672-a903-ef8a5bb8269b"),
                            Email = "Jamal_Ali@outlook.com",
                            Name = "Jamal"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("843191b0-7023-4e60-a532-be409f2240fd"),
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("44c7ef0f-8cbd-47a3-b077-d6c116a8394a"),
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = new Guid("d34c7a34-4a51-4fd3-8c10-a5566cddb518"),
                            Name = "Mobiles"
                        },
                        new
                        {
                            CategoryId = new Guid("30ad1a3f-4476-493a-a1b0-c2b56366e3b9"),
                            Name = "Tablets"
                        },
                        new
                        {
                            CategoryId = new Guid("692dec8f-e9bd-420e-8513-f1132a1360fa"),
                            Name = "Fashion"
                        },
                        new
                        {
                            CategoryId = new Guid("a7b4a669-22d8-486c-9432-294e5c4f3c95"),
                            Name = "Appliances"
                        },
                        new
                        {
                            CategoryId = new Guid("6e552106-ec11-45d4-b8db-8b0929b0d192"),
                            Name = "SmartDevices"
                        },
                        new
                        {
                            CategoryId = new Guid("e56d3b03-105f-40da-9055-e3ba4dbbe954"),
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("36b50542-d788-44c9-8125-2913d89b0f9b"),
                            OrderDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4895),
                            UserId = "4d70a68d-01db-4318-b23b-078714ced347"
                        },
                        new
                        {
                            OrderId = new Guid("7ab3db9c-f063-43ee-8923-a96b462c23b3"),
                            OrderDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4906),
                            UserId = "7ecb5903-a3a8-4d6c-8bcf-bac712fd1d86"
                        },
                        new
                        {
                            OrderId = new Guid("dc2eb7d0-e008-48f1-a171-5b9f03391526"),
                            OrderDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4913),
                            UserId = "4d70a68d-01db-4318-b23b-078714ced347"
                        },
                        new
                        {
                            OrderId = new Guid("1254d8bf-ca94-405b-8e2d-07f7cb466cd0"),
                            OrderDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4920),
                            UserId = "45bb0a73-7ed7-4d4c-9b5b-10a2ff66180f"
                        },
                        new
                        {
                            OrderId = new Guid("dca411e5-f593-4feb-932e-846dac4bc9ec"),
                            OrderDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4927),
                            UserId = "4d70a68d-01db-4318-b23b-078714ced347"
                        },
                        new
                        {
                            OrderId = new Guid("c304455e-ba11-44e2-9198-b290dec7a3ec"),
                            OrderDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4943),
                            UserId = "d2db1857-d4ea-4c1b-8c73-f6fa6affdfb1"
                        },
                        new
                        {
                            OrderId = new Guid("1ad6b2e4-6083-46c9-891c-be3d290710bd"),
                            OrderDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4950),
                            UserId = "45bb0a73-7ed7-4d4c-9b5b-10a2ff66180f"
                        },
                        new
                        {
                            OrderId = new Guid("6cef3c2f-c313-47f4-8a43-7ca4eb5dd69f"),
                            OrderDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4958),
                            UserId = "4d70a68d-01db-4318-b23b-078714ced347"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TagId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("6f472250-bf50-44b0-ac91-289c27457755"),
                            CategoryType = 2,
                            Name = "Samsung Galaxy S21",
                            OrderId = new Guid("36b50542-d788-44c9-8125-2913d89b0f9b"),
                            Price = 799.99m
                        },
                        new
                        {
                            ProductId = new Guid("983a6355-b6dd-4b37-b912-40614853099e"),
                            CategoryType = 1,
                            Name = "Sony Smart TV",
                            OrderId = new Guid("7ab3db9c-f063-43ee-8923-a96b462c23b3"),
                            Price = 1299.99m
                        },
                        new
                        {
                            ProductId = new Guid("ab8caa48-4203-405f-9291-8e0a8c1b81ce"),
                            CategoryType = 1,
                            Name = "Canon EOS Rebel T7",
                            OrderId = new Guid("dc2eb7d0-e008-48f1-a171-5b9f03391526"),
                            Price = 499.99m
                        },
                        new
                        {
                            ProductId = new Guid("cf9ee6d2-3d82-4f66-8092-d0fe941097de"),
                            CategoryType = 3,
                            Name = "Nike Running Shoes",
                            OrderId = new Guid("7ab3db9c-f063-43ee-8923-a96b462c23b3"),
                            Price = 89.99m
                        },
                        new
                        {
                            ProductId = new Guid("1e13ad8e-34d9-47b7-ab91-ff1305b54a39"),
                            CategoryType = 4,
                            Name = "KitchenAid Stand Mixer",
                            OrderId = new Guid("1254d8bf-ca94-405b-8e2d-07f7cb466cd0"),
                            Price = 349.99m
                        },
                        new
                        {
                            ProductId = new Guid("f95100c3-1026-4a22-aeea-91bbbd6a0f95"),
                            CategoryType = 1,
                            Name = "HP Printer",
                            OrderId = new Guid("7ab3db9c-f063-43ee-8923-a96b462c23b3"),
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("8ed6a215-9304-4b34-9f03-15ec95acf7e0"),
                            CategoryType = 3,
                            Name = "Levi's Jeans",
                            OrderId = new Guid("7ab3db9c-f063-43ee-8923-a96b462c23b3"),
                            Price = 59.99m
                        },
                        new
                        {
                            ProductId = new Guid("ae721a5e-1aed-49ea-bbe5-b052532e9b5f"),
                            CategoryType = 1,
                            Name = "Bose Noise-Canceling Headphones",
                            OrderId = new Guid("7ab3db9c-f063-43ee-8923-a96b462c23b3"),
                            Price = 299.99m
                        },
                        new
                        {
                            ProductId = new Guid("df5ccde3-d90d-4b31-a76d-66f09becb349"),
                            CategoryType = 6,
                            Name = "Fitbit Charge 5",
                            OrderId = new Guid("7ab3db9c-f063-43ee-8923-a96b462c23b3"),
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("81d28b43-fb4d-40c3-80fc-926b555887ed"),
                            CategoryType = 4,
                            Name = "Cuisinart Coffee Maker",
                            OrderId = new Guid("36b50542-d788-44c9-8125-2913d89b0f9b"),
                            Price = 79.99m
                        },
                        new
                        {
                            ProductId = new Guid("5fa5e5c4-f93c-4cfa-bda0-e05dd1e04ff2"),
                            CategoryType = 3,
                            Name = "Adidas Running Shoes",
                            OrderId = new Guid("dc2eb7d0-e008-48f1-a171-5b9f03391526"),
                            Price = 109.99m
                        },
                        new
                        {
                            ProductId = new Guid("c3ceb045-4019-40c3-9a78-9275bc1f59ff"),
                            CategoryType = 5,
                            Name = "Amazon Echo Dot",
                            OrderId = new Guid("7ab3db9c-f063-43ee-8923-a96b462c23b3"),
                            Price = 39.99m
                        },
                        new
                        {
                            ProductId = new Guid("c286eb51-c8d9-4049-bb96-0a8fda24e61e"),
                            CategoryType = 6,
                            Name = "Razer Gaming Mouse",
                            OrderId = new Guid("7ab3db9c-f063-43ee-8923-a96b462c23b3"),
                            Price = 69.99m
                        },
                        new
                        {
                            ProductId = new Guid("1153a908-18f5-402d-bbce-a73b2a9ae894"),
                            CategoryType = 3,
                            Name = "Calvin Klein Watch",
                            OrderId = new Guid("7ab3db9c-f063-43ee-8923-a96b462c23b3"),
                            Price = 199.99m
                        },
                        new
                        {
                            ProductId = new Guid("6c93eaba-60c7-4cd5-a3a9-a2a0b99e9c05"),
                            CategoryType = 3,
                            Name = "Fossil Smartwatch",
                            OrderId = new Guid("36b50542-d788-44c9-8125-2913d89b0f9b"),
                            Price = 149.99m
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("e8cbf26c-66e6-48a8-8326-3f2a775dedb0"),
                            Name = "Fashion 2024"
                        },
                        new
                        {
                            TagId = new Guid("97e104e5-8f88-4d77-8871-c1a42e6bebc4"),
                            Name = "FlagShip Mobiles"
                        },
                        new
                        {
                            TagId = new Guid("e38a559d-a6ec-4c8f-8545-e9aacbba0fe5"),
                            Name = "Tech"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("983a6355-b6dd-4b37-b912-40614853099e"),
                            TagId = new Guid("97e104e5-8f88-4d77-8871-c1a42e6bebc4")
                        },
                        new
                        {
                            ProductId = new Guid("ab8caa48-4203-405f-9291-8e0a8c1b81ce"),
                            TagId = new Guid("e38a559d-a6ec-4c8f-8545-e9aacbba0fe5")
                        },
                        new
                        {
                            ProductId = new Guid("cf9ee6d2-3d82-4f66-8092-d0fe941097de"),
                            TagId = new Guid("e38a559d-a6ec-4c8f-8545-e9aacbba0fe5")
                        },
                        new
                        {
                            ProductId = new Guid("1e13ad8e-34d9-47b7-ab91-ff1305b54a39"),
                            TagId = new Guid("e38a559d-a6ec-4c8f-8545-e9aacbba0fe5")
                        },
                        new
                        {
                            ProductId = new Guid("f95100c3-1026-4a22-aeea-91bbbd6a0f95"),
                            TagId = new Guid("e38a559d-a6ec-4c8f-8545-e9aacbba0fe5")
                        },
                        new
                        {
                            ProductId = new Guid("8ed6a215-9304-4b34-9f03-15ec95acf7e0"),
                            TagId = new Guid("e38a559d-a6ec-4c8f-8545-e9aacbba0fe5")
                        },
                        new
                        {
                            ProductId = new Guid("ae721a5e-1aed-49ea-bbe5-b052532e9b5f"),
                            TagId = new Guid("e38a559d-a6ec-4c8f-8545-e9aacbba0fe5")
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Text", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Textsss");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85d98fe6-8f34-466f-9326-e008ad4acf8b"),
                            ArabicText = "مرحبا",
                            EnglishText = "Welcome",
                            TextKey = "WelcomeMessage"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7ecb5903-a3a8-4d6c-8bcf-bac712fd1d86",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97edc9d4-c5c2-4290-b4de-709cbd118051",
                            CreationDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4746),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4fe27054-3661-44d8-b7d8-0afcedaec787",
                            TwoFactorEnabled = false,
                            UserName = "john doe"
                        },
                        new
                        {
                            Id = "4d70a68d-01db-4318-b23b-078714ced347",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba224085-322c-44ec-9e47-8f4d50bde428",
                            CreationDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4773),
                            Email = "jane.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0f83cac-0838-4636-8df9-6ca8a73a42b9",
                            TwoFactorEnabled = false,
                            UserName = "jane doe"
                        },
                        new
                        {
                            Id = "45bb0a73-7ed7-4d4c-9b5b-10a2ff66180f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56998682-5f04-41ed-bac4-9bc7ba620957",
                            CreationDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4790),
                            Email = "Sara.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37721efa-3ce7-4328-b46e-97da54848926",
                            TwoFactorEnabled = false,
                            UserName = "Sara doe"
                        },
                        new
                        {
                            Id = "d2db1857-d4ea-4c1b-8c73-f6fa6affdfb1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ff0797f-432b-4248-8d2f-6b9edbf4a0fb",
                            CreationDate = new DateTime(2024, 1, 5, 15, 19, 18, 836, DateTimeKind.Local).AddTicks(4814),
                            Email = "Sandy.Jakson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98d95edf-558e-4f3e-aa14-78fc3d5476ed",
                            TwoFactorEnabled = false,
                            UserName = "Sandy Jakson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", null)
                        .WithMany("Products")
                        .HasForeignKey("TagId");

                    b.Navigation("Category");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
