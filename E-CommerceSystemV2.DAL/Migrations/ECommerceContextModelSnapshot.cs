// <auto-generated />
using System;
using E_CommerceSystemV2.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_CommerceSystemV2.DAL.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    partial class ECommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.CampaignCustomers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CampaignCustomers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e7154a6-3183-42fb-8911-a572316731cf"),
                            Email = "marwaghonem29@gmail.com",
                            Name = "Marwa"
                        },
                        new
                        {
                            Id = new Guid("777c6bd7-29d8-4a00-92d0-cbf34460e860"),
                            Email = "Jamal_Ali@outlook.com",
                            Name = "Jamal"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("e6d518b7-72ee-49d7-9500-0b9ebee8443e"),
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("78747418-3cde-421c-a789-8ed80ad1b7d5"),
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = new Guid("6eb52884-9be7-497d-8dfe-ce8275963d65"),
                            Name = "Mobiles"
                        },
                        new
                        {
                            CategoryId = new Guid("ebb9e988-5ab1-4b26-867e-d440a8ae996e"),
                            Name = "Tablets"
                        },
                        new
                        {
                            CategoryId = new Guid("4428caba-e423-4438-9c10-096ef781e58f"),
                            Name = "Fashion"
                        },
                        new
                        {
                            CategoryId = new Guid("3c9734be-cf73-42c9-bfd4-0396e89fe6f8"),
                            Name = "Appliances"
                        },
                        new
                        {
                            CategoryId = new Guid("876a50b5-ebc1-4be6-88dd-3dc7f70d748a"),
                            Name = "SmartDevices"
                        },
                        new
                        {
                            CategoryId = new Guid("8319c5a3-a526-41a9-b527-6c7ad7e94aa7"),
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("ad6bd523-a194-4235-892e-62f765cb51b2"),
                            OrderDate = new DateTime(2024, 1, 10, 8, 42, 30, 367, DateTimeKind.Local).AddTicks(32),
                            UserId = "ecce009f-c6b2-48ef-bf80-99363d4cd53a"
                        },
                        new
                        {
                            OrderId = new Guid("e7e89f06-a384-4df6-9466-5d33a5dcbea3"),
                            OrderDate = new DateTime(2024, 1, 10, 8, 42, 30, 367, DateTimeKind.Local).AddTicks(45),
                            UserId = "79889c8e-d151-44bf-92bc-e811a2b03cf8"
                        },
                        new
                        {
                            OrderId = new Guid("6e068562-f13e-47f9-9639-f8b250dc61ef"),
                            OrderDate = new DateTime(2024, 1, 10, 8, 42, 30, 367, DateTimeKind.Local).AddTicks(52),
                            UserId = "ecce009f-c6b2-48ef-bf80-99363d4cd53a"
                        },
                        new
                        {
                            OrderId = new Guid("d1f887eb-70bf-4f71-aeea-d667ae6eb566"),
                            OrderDate = new DateTime(2024, 1, 10, 8, 42, 30, 367, DateTimeKind.Local).AddTicks(68),
                            UserId = "9797bc68-71b8-49de-aa9d-1953616f2366"
                        },
                        new
                        {
                            OrderId = new Guid("0023148a-a3b6-4903-b73a-7fd3be268cb8"),
                            OrderDate = new DateTime(2024, 1, 10, 8, 42, 30, 367, DateTimeKind.Local).AddTicks(73),
                            UserId = "ecce009f-c6b2-48ef-bf80-99363d4cd53a"
                        },
                        new
                        {
                            OrderId = new Guid("1cb44ee7-6105-418d-8ce9-189c2d053416"),
                            OrderDate = new DateTime(2024, 1, 10, 8, 42, 30, 367, DateTimeKind.Local).AddTicks(102),
                            UserId = "126f9b91-0660-4d35-b66e-c00893477c16"
                        },
                        new
                        {
                            OrderId = new Guid("c1aa224f-7262-4e72-a3c7-efb58bd0b1dc"),
                            OrderDate = new DateTime(2024, 1, 10, 8, 42, 30, 367, DateTimeKind.Local).AddTicks(110),
                            UserId = "9797bc68-71b8-49de-aa9d-1953616f2366"
                        },
                        new
                        {
                            OrderId = new Guid("3b80e265-ef3b-4bd5-addc-b2a3627d980b"),
                            OrderDate = new DateTime(2024, 1, 10, 8, 42, 30, 367, DateTimeKind.Local).AddTicks(117),
                            UserId = "ecce009f-c6b2-48ef-bf80-99363d4cd53a"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TagId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("5b843000-0c07-4bed-8c88-b6b3715ee759"),
                            CategoryType = 2,
                            Name = "Samsung Galaxy S21",
                            OrderId = new Guid("ad6bd523-a194-4235-892e-62f765cb51b2"),
                            Price = 799.99m
                        },
                        new
                        {
                            ProductId = new Guid("a32ef41f-0745-4b0b-bd78-e9a813c80626"),
                            CategoryType = 1,
                            Name = "Sony Smart TV",
                            OrderId = new Guid("e7e89f06-a384-4df6-9466-5d33a5dcbea3"),
                            Price = 1299.99m
                        },
                        new
                        {
                            ProductId = new Guid("bda98f8a-6444-4a75-86b1-cfdb0a34d332"),
                            CategoryType = 1,
                            Name = "Canon EOS Rebel T7",
                            OrderId = new Guid("6e068562-f13e-47f9-9639-f8b250dc61ef"),
                            Price = 499.99m
                        },
                        new
                        {
                            ProductId = new Guid("dea0d956-c9d2-490f-9048-4bf9f7e00e3b"),
                            CategoryType = 3,
                            Name = "Nike Running Shoes",
                            OrderId = new Guid("e7e89f06-a384-4df6-9466-5d33a5dcbea3"),
                            Price = 89.99m
                        },
                        new
                        {
                            ProductId = new Guid("54ac2598-5c9b-4d7c-a457-6964e22f24c6"),
                            CategoryType = 4,
                            Name = "KitchenAid Stand Mixer",
                            OrderId = new Guid("d1f887eb-70bf-4f71-aeea-d667ae6eb566"),
                            Price = 349.99m
                        },
                        new
                        {
                            ProductId = new Guid("3a8bc47f-fe1f-44a4-8adc-4398a06622ae"),
                            CategoryType = 1,
                            Name = "HP Printer",
                            OrderId = new Guid("e7e89f06-a384-4df6-9466-5d33a5dcbea3"),
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("fbce8595-093d-41d2-8a23-da7907cee36d"),
                            CategoryType = 3,
                            Name = "Levi's Jeans",
                            OrderId = new Guid("e7e89f06-a384-4df6-9466-5d33a5dcbea3"),
                            Price = 59.99m
                        },
                        new
                        {
                            ProductId = new Guid("f2845201-7964-4b21-b7c0-0828f37358c4"),
                            CategoryType = 1,
                            Name = "Bose Noise-Canceling Headphones",
                            OrderId = new Guid("e7e89f06-a384-4df6-9466-5d33a5dcbea3"),
                            Price = 299.99m
                        },
                        new
                        {
                            ProductId = new Guid("cdf3295b-3d9e-4395-b41b-281d6ac6d691"),
                            CategoryType = 6,
                            Name = "Fitbit Charge 5",
                            OrderId = new Guid("e7e89f06-a384-4df6-9466-5d33a5dcbea3"),
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("a107453b-7703-4f67-ab62-a94776e458bc"),
                            CategoryType = 4,
                            Name = "Cuisinart Coffee Maker",
                            OrderId = new Guid("ad6bd523-a194-4235-892e-62f765cb51b2"),
                            Price = 79.99m
                        },
                        new
                        {
                            ProductId = new Guid("97477696-21db-4a8b-9d24-15f46ec71cc9"),
                            CategoryType = 3,
                            Name = "Adidas Running Shoes",
                            OrderId = new Guid("6e068562-f13e-47f9-9639-f8b250dc61ef"),
                            Price = 109.99m
                        },
                        new
                        {
                            ProductId = new Guid("f40c0dcc-5003-4b80-ad3e-ba3f10e2c8df"),
                            CategoryType = 5,
                            Name = "Amazon Echo Dot",
                            OrderId = new Guid("e7e89f06-a384-4df6-9466-5d33a5dcbea3"),
                            Price = 39.99m
                        },
                        new
                        {
                            ProductId = new Guid("6929afd3-c996-42ac-84fb-82c0c0bf943e"),
                            CategoryType = 6,
                            Name = "Razer Gaming Mouse",
                            OrderId = new Guid("e7e89f06-a384-4df6-9466-5d33a5dcbea3"),
                            Price = 69.99m
                        },
                        new
                        {
                            ProductId = new Guid("d494c082-4db3-4550-8279-431a50a4923c"),
                            CategoryType = 3,
                            Name = "Calvin Klein Watch",
                            OrderId = new Guid("e7e89f06-a384-4df6-9466-5d33a5dcbea3"),
                            Price = 199.99m
                        },
                        new
                        {
                            ProductId = new Guid("069fa4b5-df42-450a-b5c0-81f227340814"),
                            CategoryType = 3,
                            Name = "Fossil Smartwatch",
                            OrderId = new Guid("ad6bd523-a194-4235-892e-62f765cb51b2"),
                            Price = 149.99m
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("b6109b6d-bcfc-45c6-b35c-cab9079f5637"),
                            Name = "Fashion 2024"
                        },
                        new
                        {
                            TagId = new Guid("363c132c-1c56-4cf7-bc2a-2bd681c6be51"),
                            Name = "FlagShip Mobiles"
                        },
                        new
                        {
                            TagId = new Guid("e88056e3-0b4b-44b4-87b5-b52f4d46556f"),
                            Name = "Tech"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("a32ef41f-0745-4b0b-bd78-e9a813c80626"),
                            TagId = new Guid("363c132c-1c56-4cf7-bc2a-2bd681c6be51")
                        },
                        new
                        {
                            ProductId = new Guid("bda98f8a-6444-4a75-86b1-cfdb0a34d332"),
                            TagId = new Guid("e88056e3-0b4b-44b4-87b5-b52f4d46556f")
                        },
                        new
                        {
                            ProductId = new Guid("dea0d956-c9d2-490f-9048-4bf9f7e00e3b"),
                            TagId = new Guid("e88056e3-0b4b-44b4-87b5-b52f4d46556f")
                        },
                        new
                        {
                            ProductId = new Guid("54ac2598-5c9b-4d7c-a457-6964e22f24c6"),
                            TagId = new Guid("e88056e3-0b4b-44b4-87b5-b52f4d46556f")
                        },
                        new
                        {
                            ProductId = new Guid("3a8bc47f-fe1f-44a4-8adc-4398a06622ae"),
                            TagId = new Guid("e88056e3-0b4b-44b4-87b5-b52f4d46556f")
                        },
                        new
                        {
                            ProductId = new Guid("fbce8595-093d-41d2-8a23-da7907cee36d"),
                            TagId = new Guid("e88056e3-0b4b-44b4-87b5-b52f4d46556f")
                        },
                        new
                        {
                            ProductId = new Guid("f2845201-7964-4b21-b7c0-0828f37358c4"),
                            TagId = new Guid("e88056e3-0b4b-44b4-87b5-b52f4d46556f")
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Text", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArabicText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Textsss");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1181958f-63fd-4172-9f08-65e6892aed56"),
                            ArabicText = "مرحبا",
                            EnglishText = "Welcome",
                            TextKey = "WelcomeMessage"
                        },
                        new
                        {
                            Id = new Guid("c3d4261a-0f29-4f18-8e14-d2357e0cfe10"),
                            ArabicText = "مرحبا {0} كلمة المرور الخاصة بك هي {1}",
                            EnglishText = "Hello {0}, your Password Is {1}.",
                            TextKey = "PasswordRetrievalMessage"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "79889c8e-d151-44bf-92bc-e811a2b03cf8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ca84058-a984-420b-bd95-2db5d7dc4256",
                            CreationDate = new DateTime(2024, 1, 10, 8, 42, 30, 366, DateTimeKind.Local).AddTicks(9938),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab9ef759-c6b9-43a1-a07b-f6a32b01ba82",
                            TwoFactorEnabled = false,
                            UserName = "john doe"
                        },
                        new
                        {
                            Id = "ecce009f-c6b2-48ef-bf80-99363d4cd53a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "031587d4-f431-4a45-8425-ca3cec400a5d",
                            CreationDate = new DateTime(2024, 1, 10, 8, 42, 30, 366, DateTimeKind.Local).AddTicks(9964),
                            Email = "jane.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54388261-c387-4e4b-a2ac-89b98efec038",
                            TwoFactorEnabled = false,
                            UserName = "jane doe"
                        },
                        new
                        {
                            Id = "9797bc68-71b8-49de-aa9d-1953616f2366",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7933f18-085e-4120-9049-e9b20aa241e0",
                            CreationDate = new DateTime(2024, 1, 10, 8, 42, 30, 366, DateTimeKind.Local).AddTicks(9996),
                            Email = "Sara.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e4f878f-ca7d-4326-bf9f-5b98d1218df1",
                            TwoFactorEnabled = false,
                            UserName = "Sara doe"
                        },
                        new
                        {
                            Id = "126f9b91-0660-4d35-b66e-c00893477c16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd1ca627-e2c3-472d-b68d-a3e64e9a172a",
                            CreationDate = new DateTime(2024, 1, 10, 8, 42, 30, 367, DateTimeKind.Local).AddTicks(17),
                            Email = "Sandy.Jakson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec0265b0-3a75-4e9a-8623-dc62a75eb36b",
                            TwoFactorEnabled = false,
                            UserName = "Sandy Jakson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", null)
                        .WithMany("Products")
                        .HasForeignKey("TagId");

                    b.Navigation("Category");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
