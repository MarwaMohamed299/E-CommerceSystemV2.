// <auto-generated />
using System;
using E_CommerceSystemV2.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_CommerceSystemV2.DAL.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    [Migration("20231227172219_AddingCampaignCustomers")]
    partial class AddingCampaignCustomers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.CampaignCustomers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CampaignCustomers");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("dcaefc59-ed9f-43ad-8bdc-a7278fc1d90e"),
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("652c0564-99c4-46a6-80ef-ec1e46505617"),
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = new Guid("847da3ec-7920-4717-b340-9d42e9768866"),
                            Name = "Mobiles"
                        },
                        new
                        {
                            CategoryId = new Guid("d0980572-7070-4166-badc-e84cba75beaf"),
                            Name = "Tablets"
                        },
                        new
                        {
                            CategoryId = new Guid("2cfb589a-7d17-446a-9b5d-0102c4a8105b"),
                            Name = "Fashion"
                        },
                        new
                        {
                            CategoryId = new Guid("bccd5635-cd23-42dd-aad8-89536fc60da4"),
                            Name = "Appliances"
                        },
                        new
                        {
                            CategoryId = new Guid("28280a96-f2e8-41b8-9105-871030a88892"),
                            Name = "SmartDevices"
                        },
                        new
                        {
                            CategoryId = new Guid("99ce44f7-aa4b-45db-ae00-f594c6a1015b"),
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("5a5b3e05-0618-4a5a-a2fd-4af296933a48"),
                            OrderDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2302),
                            UserId = "ffd6b2bb-e580-4609-b00d-b54ee95e1ee7"
                        },
                        new
                        {
                            OrderId = new Guid("43923a75-be2d-4ee8-af79-919a3c402805"),
                            OrderDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2306),
                            UserId = "14258c70-cad6-4a55-8327-a9fa0bee6682"
                        },
                        new
                        {
                            OrderId = new Guid("f3a5e79b-00bc-4e46-abfc-ff8f72a42c38"),
                            OrderDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2308),
                            UserId = "ffd6b2bb-e580-4609-b00d-b54ee95e1ee7"
                        },
                        new
                        {
                            OrderId = new Guid("5e89a538-2c6a-47ce-ae56-fe1328da3819"),
                            OrderDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2313),
                            UserId = "a14a27cd-493f-47ca-bced-e3adb51cf376"
                        },
                        new
                        {
                            OrderId = new Guid("cb0a6c9a-b074-4665-95f5-f6d95ef51f1d"),
                            OrderDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2316),
                            UserId = "ffd6b2bb-e580-4609-b00d-b54ee95e1ee7"
                        },
                        new
                        {
                            OrderId = new Guid("18371255-84f5-4b35-a9df-47c09ac8a5e1"),
                            OrderDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2320),
                            UserId = "76034889-5c66-4785-bdc2-8a0d18644f7f"
                        },
                        new
                        {
                            OrderId = new Guid("34057720-f9c6-41f6-a6c8-73c57b566317"),
                            OrderDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2322),
                            UserId = "a14a27cd-493f-47ca-bced-e3adb51cf376"
                        },
                        new
                        {
                            OrderId = new Guid("6889c2c3-a9bf-47b7-bf40-64a3ef0fac91"),
                            OrderDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2326),
                            UserId = "ffd6b2bb-e580-4609-b00d-b54ee95e1ee7"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TagId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("d76a9078-b0a5-4a5f-8f67-a898aad2feb8"),
                            CategoryType = 2,
                            Name = "Samsung Galaxy S21",
                            OrderId = new Guid("5a5b3e05-0618-4a5a-a2fd-4af296933a48"),
                            Price = 799.99m
                        },
                        new
                        {
                            ProductId = new Guid("2e5c100c-72cc-485c-a702-8c85b04ad2f2"),
                            CategoryType = 1,
                            Name = "Sony Smart TV",
                            OrderId = new Guid("43923a75-be2d-4ee8-af79-919a3c402805"),
                            Price = 1299.99m
                        },
                        new
                        {
                            ProductId = new Guid("b2d8d64d-f203-4577-9f4d-239ae6164842"),
                            CategoryType = 1,
                            Name = "Canon EOS Rebel T7",
                            OrderId = new Guid("f3a5e79b-00bc-4e46-abfc-ff8f72a42c38"),
                            Price = 499.99m
                        },
                        new
                        {
                            ProductId = new Guid("db2ef700-401a-4b91-b6ed-3cf234f91ade"),
                            CategoryType = 3,
                            Name = "Nike Running Shoes",
                            OrderId = new Guid("43923a75-be2d-4ee8-af79-919a3c402805"),
                            Price = 89.99m
                        },
                        new
                        {
                            ProductId = new Guid("10b1fa31-cad6-4bda-aa53-f3e86cebc4d5"),
                            CategoryType = 4,
                            Name = "KitchenAid Stand Mixer",
                            OrderId = new Guid("5e89a538-2c6a-47ce-ae56-fe1328da3819"),
                            Price = 349.99m
                        },
                        new
                        {
                            ProductId = new Guid("b5bd6d48-cb31-4269-8f35-8fc6da0adc7e"),
                            CategoryType = 1,
                            Name = "HP Printer",
                            OrderId = new Guid("43923a75-be2d-4ee8-af79-919a3c402805"),
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("eb58dbe8-4d10-4c33-8816-f3ec4f7f39d4"),
                            CategoryType = 3,
                            Name = "Levi's Jeans",
                            OrderId = new Guid("43923a75-be2d-4ee8-af79-919a3c402805"),
                            Price = 59.99m
                        },
                        new
                        {
                            ProductId = new Guid("f23d8d74-7264-4ae8-9dec-78946e7809ac"),
                            CategoryType = 1,
                            Name = "Bose Noise-Canceling Headphones",
                            OrderId = new Guid("43923a75-be2d-4ee8-af79-919a3c402805"),
                            Price = 299.99m
                        },
                        new
                        {
                            ProductId = new Guid("3b1b2bb8-2cfa-4bb2-937b-850683637f44"),
                            CategoryType = 6,
                            Name = "Fitbit Charge 5",
                            OrderId = new Guid("43923a75-be2d-4ee8-af79-919a3c402805"),
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("f06074dc-4eb2-4aba-aa56-b4bd28b10908"),
                            CategoryType = 4,
                            Name = "Cuisinart Coffee Maker",
                            OrderId = new Guid("5a5b3e05-0618-4a5a-a2fd-4af296933a48"),
                            Price = 79.99m
                        },
                        new
                        {
                            ProductId = new Guid("b915f98b-9250-4c20-b043-a06d90bc4f7e"),
                            CategoryType = 3,
                            Name = "Adidas Running Shoes",
                            OrderId = new Guid("f3a5e79b-00bc-4e46-abfc-ff8f72a42c38"),
                            Price = 109.99m
                        },
                        new
                        {
                            ProductId = new Guid("18bf1839-4e71-419b-81db-6f0ab0298956"),
                            CategoryType = 5,
                            Name = "Amazon Echo Dot",
                            OrderId = new Guid("43923a75-be2d-4ee8-af79-919a3c402805"),
                            Price = 39.99m
                        },
                        new
                        {
                            ProductId = new Guid("12ab3925-dc14-4a9a-ace4-efb56e038942"),
                            CategoryType = 6,
                            Name = "Razer Gaming Mouse",
                            OrderId = new Guid("43923a75-be2d-4ee8-af79-919a3c402805"),
                            Price = 69.99m
                        },
                        new
                        {
                            ProductId = new Guid("cba94cbd-c55e-44f0-925e-b76e093c25c0"),
                            CategoryType = 3,
                            Name = "Calvin Klein Watch",
                            OrderId = new Guid("43923a75-be2d-4ee8-af79-919a3c402805"),
                            Price = 199.99m
                        },
                        new
                        {
                            ProductId = new Guid("ec1b630a-8c60-477f-8c95-bacbfec2518e"),
                            CategoryType = 3,
                            Name = "Fossil Smartwatch",
                            OrderId = new Guid("5a5b3e05-0618-4a5a-a2fd-4af296933a48"),
                            Price = 149.99m
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("318e4a94-026e-4834-8974-6950eb887e6b"),
                            Name = "Fashion 2024"
                        },
                        new
                        {
                            TagId = new Guid("19439fe2-b120-4923-8a89-24b47b790d6f"),
                            Name = "FlagShip Mobiles"
                        },
                        new
                        {
                            TagId = new Guid("fdae1f84-b417-420f-a275-5438de4fe8ec"),
                            Name = "Tech"
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("2e5c100c-72cc-485c-a702-8c85b04ad2f2"),
                            TagId = new Guid("19439fe2-b120-4923-8a89-24b47b790d6f")
                        },
                        new
                        {
                            ProductId = new Guid("b2d8d64d-f203-4577-9f4d-239ae6164842"),
                            TagId = new Guid("fdae1f84-b417-420f-a275-5438de4fe8ec")
                        },
                        new
                        {
                            ProductId = new Guid("db2ef700-401a-4b91-b6ed-3cf234f91ade"),
                            TagId = new Guid("fdae1f84-b417-420f-a275-5438de4fe8ec")
                        },
                        new
                        {
                            ProductId = new Guid("10b1fa31-cad6-4bda-aa53-f3e86cebc4d5"),
                            TagId = new Guid("fdae1f84-b417-420f-a275-5438de4fe8ec")
                        },
                        new
                        {
                            ProductId = new Guid("b5bd6d48-cb31-4269-8f35-8fc6da0adc7e"),
                            TagId = new Guid("fdae1f84-b417-420f-a275-5438de4fe8ec")
                        },
                        new
                        {
                            ProductId = new Guid("eb58dbe8-4d10-4c33-8816-f3ec4f7f39d4"),
                            TagId = new Guid("fdae1f84-b417-420f-a275-5438de4fe8ec")
                        },
                        new
                        {
                            ProductId = new Guid("f23d8d74-7264-4ae8-9dec-78946e7809ac"),
                            TagId = new Guid("fdae1f84-b417-420f-a275-5438de4fe8ec")
                        });
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "14258c70-cad6-4a55-8327-a9fa0bee6682",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26810a59-db66-4a57-84e6-fdb1f94521d0",
                            CreationDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2265),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb6e95be-2df0-440e-89c0-45a05541b1f9",
                            TwoFactorEnabled = false,
                            UserName = "john doe"
                        },
                        new
                        {
                            Id = "ffd6b2bb-e580-4609-b00d-b54ee95e1ee7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f9818d2-d6dd-48ad-bc56-366c5117f479",
                            CreationDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2272),
                            Email = "jane.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8fa800e-912e-4fdf-b325-88e1060ab482",
                            TwoFactorEnabled = false,
                            UserName = "jane doe"
                        },
                        new
                        {
                            Id = "a14a27cd-493f-47ca-bced-e3adb51cf376",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80bb158d-6573-4f5a-95b4-12ada4a027b3",
                            CreationDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2287),
                            Email = "Sara.doe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8d547a0-b24a-483a-8de9-e53f4d444939",
                            TwoFactorEnabled = false,
                            UserName = "Sara doe"
                        },
                        new
                        {
                            Id = "76034889-5c66-4785-bdc2-8a0d18644f7f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93fb0ccf-e00d-4283-81e0-b31494aabdf3",
                            CreationDate = new DateTime(2023, 12, 27, 20, 22, 17, 809, DateTimeKind.Local).AddTicks(2293),
                            Email = "Sandy.Jakson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "password123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf46d382-6853-4b35-9e47-f724fe92046a",
                            TwoFactorEnabled = false,
                            UserName = "Sandy Jakson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", null)
                        .WithMany("Products")
                        .HasForeignKey("TagId");

                    b.Navigation("Category");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.TagProducts", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_CommerceSystemV2.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.Tag", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("E_CommerceSystemV2.DAL.Data.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
